redirectorclient = {
    // Define the name of this blaze instance that clients will specify when they want to connect
    // to it.  This is a free form name but should adhere to a naming convention defined by
    // GOS Operations.
    name = #BLAZE_SERVICE_NAME#

    // Address of the redirector
    address = #REDIRECTOR_ADDRESS#:42108

    // The default Xbox Live service ID to use for address and name remaps
    serviceId = #XBOX_360_SERVICE_ID#
    siteName = #XBOX_360_LSP_NAME#

    // A list of address remaps passed to the client to setup the DirtySock remap table.  By default
    // remap entries are automatically generated by the redirector component and added to the
    // list to appropriately map the addresses/ports of the slave instances so it is not necessary
    // to list any mappings here specific to this blaze server instance.
    // Each entry in the remap table may contain the following attributes:
    //     ip = The source IP address to remap
    //     mask = Netmask applied to the source IP
    //     serviceId = The Xbox Live service ID to use. If omitted this will the default service ID
    //                 will be used (redirectorclient.serviceId).
    //     ports = A list of source to destination port mappings.  Each port mapping is a map
    //             containing the following attributes:
    //                 src = The source port
    //                 dst = The destination port
    //             If no port mappings are specified, all ports for the given address range will
    //             be remapped.
    //
    // A fully populated entry might look like:
    // {
    //     ip=1.2.3.4,
    //     mask=255.255.255.0,
    //     serviceId=0x45410004,
    //     ports = [
    //         { src=123, dst=321 },
    //         { src=567, dst=765 }
    //    ]
    // }
    xboxAddressRemap = [
        { ip=10.30.0.0, mask=255.255.0.0 }
        { ip=159.153.224.0, mask=255.255.224.0 }
    ]

    // A list of name remaps passed to the client to setup the DirtySock name remap table.
    // Each entry in the remap table may contain the following attributes:
    //     host = The source hostname to remap.  May contain a single wildcard character (*).  For
    //            example: "*.online.ea.com"
    //     serviceId = The Xbox Live service ID to remap the address to.  If omitted, the default
    //                 service ID listed above will be used (redirectorclient.serviceId).
    //     ports = A list of source to destination port mappings.  Each port mapping is a map
    //             containing the following attributes:
    //                 src = The source port
    //                 dst = The destination port
    //             If no port mappings are specified, all ports for the given address range will
    //             be remapped.
    //
    // A fully populated entry might look like:
    // {
    //     host=*.online.ea.com
    //     serviceId=0x45410004,
    //     siteName=dirtysock-dev
    //     ports = [
    //         { src=123, dst=321 },
    //         { src=567, dst=765 }
    //    ]
    // }
    xboxNameRemap = [
    ]

    // When DirtySock does a DNS lookup on a hostname and it has a name remap table (as above)
    // it will first try and resolve the lookup using the name remap table.  If the remap table
    // does not yield a match, it will then fall back on the address specified via the 'xdns'
    // selector in NetConnControl.  The following setting defines that that address it.  It is
    // important to note that the address specified MUST be an address that falls into the
    // address remapping table specified in the xboxAddressRemap table.  If this parameter is
    // omitted, the first entry in the remap table will be used instead.  If no address remaps
    // are specified, the loopback address (127.0.0.1) will be used.
    //xboxDnsDefault = 159.153.224.0

    clientVersions = {
        // List of the compatible client versions.  Only versions listed here will be accepted by
        // the redirector.  If this list is empty, any client version string will be accepted.
        compatible = [
        //    "1.2"
        ]

        // List of the incompatible client versions.  This allows a specific error message to be
        // returned to client which are reporting an incompatible version.  There is a distinction
        // here between an unrecognized client version and an incompatible one.  Different messages
        // will be returned to the client.
        incompatible = [
        //    "3.4"
        ]
    }
}

