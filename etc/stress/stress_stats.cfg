#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 230

    # Control whether SSL is used or not
    secure = false
}

# 
# This following block lists servers in addition to the server passed in the command line the tester 
# attempt to connect instances to. For exampleifthere are two servers listed here, and one in the command line, 
# then instance 0 will connect to the command line server, 1 = server-0, 2 = server-1, etc. Note if no server 
# specified in the command line, the stress tester will still use the servers listed below if any are listed. 
# 
//servers = { 
//    server-0 ="sltgos02.eao.abn-iad.ea.com:12000"
//    server-1 ="sltgos02.eao.abn-iad.ea.com:12005"
//}

#
# This following block controls how instances are started up.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 0

    # Delay between starting instances in milliseconds
    instance-delay = 1123

    # Delay between starting blocks in milliseconds
    block-delay = 0
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 5

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    # namespace = "description"
      namespace = "ps3"

    # Define the TOS version used when creating new accounts.
    tos = "2.0"
}

#
# Define the list of stress modules that will be instantiated
#
modules = [ 
            stats 
            //authentication 
          ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    // Stats gets 100% of the instances
    stats = 1
}

#
# Configuration data specific to the dummy module
#
dummy = {
    // Define which RPC to use
    action = pokeSlave

    // Define the number of milliseconds between RPC calls
    delay = 0

    // Control whether a dummy instance needs to authenticate its user before issuing its configured
    // RPC calls.
    login = false
}


stats = {
// statsmodule loads stats.cfg (and included in stats.cfg leaderboards.cfg) 
// but it doesnot load any env/* files, so if stats.cfg requires some difinititions
// they should be made inside the stats.cfg. #ifndef may be used to avoid conflicts
// when the same stats.cfg is used by the server  

    action = runAllTests
    // Random generator seed, if < 0, used srand(time)
    randSeed = -1
    minContextId = 1
    contextCount = 1000
    seqEntityId = 1 // if != 0, it generates entities sequentially, otherwise randomly
    minEntityId = 1
    maxEntityId = 8000000
    maxLeagueCount = 224270
    maxClubCount = 460000
    maxUserCount = 8000000

    maxLbStartRank = 100000
    maxPeriodOffset = 0
    maxIdCount = 64
    sampleSize = 2 // number of 30 sec periods
    
    // hitRate expresses probability of hitting RPC. Values are relative and are normalized aginst sum 
    // type of value is 'double'.
    // rowCtr is a number of rows involved in the operation
    rpcList = {
// -----------------------------------------------------------
    updateStats = { hitRate = 0, rowCtr = 16 },
    deleteStatsByContext = { hitRate = 0, rowCtr = 50 },
    deleteStats = { hitRate = 0, rowCtr = 50 },
// ------------------------------------------------------------
   // Simulate score reporting. Hit rate is for the expected game/user distribution
   // uncomment if used
   // updateNormalGameStats = { hitRate = 32, rowCtr = 1 },
   // updateLeagueGameStats = { hitRate = 8.4, rowCtr = 1 },
   // updateClubGameStats = { hitRate = 3.6, rowCtr = 1 },
   // updateSoloGameStats = { hitRate = 31.9, rowCtr = 1 },
   // updateSponsorEventGameStats = { hitRate = 24, rowCtr = 1 },
   // updateOtpGameStats = { hitRate = 0.1, rowCtr = 1 },
// ------------------------------------------------------------
    // Hit rates set according data in test environment
    getKeyScopesMap = { hitRate = 42, rowCtr = 1 },
    getStatGroupList = { hitRate = 42, rowCtr = 1 },
    getLeaderboardGroup = { hitRate = 50, rowCtr = 50 },
    getLeaderboard = { hitRate = 46, rowCtr = 50 },
    getFilteredLeaderboard = { hitRate = 40, rowCtr = 50 },
    getLeaderboardTree = { hitRate = 13, rowCtr = 50 },
    getStatGroup = { hitRate = 3, rowCtr = 50 },
    getStatsByGroupAsync = { hitRate = 3, rowCtr = 50 },
    getStatsByGroup = { hitRate = 1, rowCtr = 50 },
    getCenteredLeaderboard = { hitRate = 1, rowCtr = 50 },
    getStatDescs = { hitRate = 1, rowCtr = 1 }
    getStats = { hitRate = 1, rowCtr = 50 },
    getEntityCount = { hitRate = 1, rowCtr = 50 }, // may be lengthy
    getLeaderboardFolder = { hitRate = 1, rowCtr = 50 },
    getLeaderboardEntityCount = { hitRate = 1, rowCtr = 50 }
 }

    normalGames = [TrustGameStats, NormalGameStats]
    soloGames = [TrustGameStats, SoloGameStats ]
    otpGames = [TrustGameStats,MultiplayerGameStats, ClubOTPPlayerStats]
    clubGames = [TrustGameStats, ClubRankStats, ClubRankLeagueStats, ClubOTPPlayerStats, ClubMemberStats, ClubUserCareerStats]
    leagueGames = [TrustGameStats, LeagueUserStats, LeagueMemberStats, PlayerStats]
    sponsorEventGames = [TrustGameStats, SponsorEvent10120Stats]

    // Define the number of milliseconds between RPC calls
    delay = 2413

    // Control whether an instance needs to authenticate its user before issuing its configured
    // RPC calls.
    login = true
}

logging = {
    level = INFO
}


