//
// Configuration file for the stress tester
//

// Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    // Total number of connections to use
    num-connections = 100

    // Control whether SSL is used or not
    secure = false
}

//
// This following block controls how instances are started up.
//
startup = {
    // Number of instances to start up in a given pass
    // A block size of 0 will start all instances simultaneously
    block-size = 100

    // Delay between starting instances in milliseconds
    instance-delay = 10

    // Delay between starting blocks in milliseconds
    block-delay = 10
}

//
// Define the account/authentication parameters used for account creation and authentication
//
account = {
    // Specify the starting integer value to use when generating email addresses.  This value
    // should be adjusted when multiple stress tester instances are running in parallel against the
    // same blaze server to avoid overlap of account names.  For example, if each stress tester
    // instance was configurated for 1000 connections, then the first config file would set this
    // to 0 and the second instance would set this to 1000.
    start-index = 2

    // Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    // Define the password used for authentication each account
    password = "password"

    // Define the persona format used when creating personas.  This is not used for authentication.
    // Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    // Define the namespace used when creating personas.
    namespace = "description"

    // Define the TOS version used when creating new accounts.
    tos = "2.0"

    // define the authentication mechanism to use: pc, ps3, or xbox360
    type = pc

    xbox360Accounts = [
#include "stress/xbox360.cfg"
    ]

}

//
// Define the list of stress modules that will be instantiated
//
modules = [ league ]

//
// Define how the available instances/connections are distributed amongst the different modules
//
distribution = {
    league = 1.0
}

//
// Configuration data specific to the league module
//
league = {
    login = true

    // number of milliseconds between issuing commands
    delay = 2000

    statOutInterval = 1000
    
    // stop after a successful result of each configured action
    smokeTest = false

    // startup
    wipeTables = false
    // fill tables to creation parameters--keeping existing data if not wiped first (fast)
    fillTables = false

    //
    // Data creation parameters
    // used if fillTables is true
    //

    // target database to populate
    dbhost = sdevgosmydb1.online.ea.com
    dbport = 3306
    database = "rshou"
    dbuser = "rshou"
    dbpass = "rshou"

    // patterns and params for generated leagues
    persona-format = "s%05x"
    email-format = "blaze-stress%05x@ea.com"

    leaguename = "league%05x"
    abbrev = "%05x"
    desc = "%05x"

    // number of leagues with specified number of members
    leagueCountMembers_1 = 100
    leagueCountMembers_3 = 200
    leagueCountMembers_6 = 150
    leagueCountMembers_12 = 50
    leagueCountMembers_20 = 50
    leagueCountMembers_32 = 10
    totalUsers = 100000

    // patterns and params for generating news
    newsBody= "This is news %05x"
    newsPerLeague = 10

    //
    // Test parameters
    //

    // sets defaults for non-overridden (unspecified) action/test distributions
    // the following values are valid:
    //    populate: grow the database (gradual DB population using RPC calls)
    //    simulate: simulate "typical-use" distribution of RPC calls
    //    custom:   only use override distribution parameters of actions/tests (if an action/test is unspecified, 0 is used)
    testMode = simulate

    // not sure if it matters, but set a limit for the number of invites a user can have
    userInviteLimit = 50

    // max count of results to return
    // if unspecified, defaults to hard-coded values in module
    findLeaguesMaxResults = 30
    getNewsMaxResults = 10
    getRecentGamesMaxResults = 50

    // draft settings
    // if unspecified, defaults to hard-coded values in module
    maxDraftMembers = 6
    draftProfileBatchSize = 100

    // game score settings
    // if unspecified, defaults to hard-coded values in module
    maxGameScore = 40

    // override distribution of actions/tests for the connections
    // note that actions/tests are not the same as RPC calls (actions/tests can call multiple RPCs in sequence)
    // unspecified (or commented-out) actions/tests use the default according to testing condition
//    acceptTrade = 1
//    createLeague = 1
//    deleteLeague = 1
//    //getInvitations = 1
//    //getLeague = 1
//    //getLeaguesByUser = 1
//    //getMembers = 1
//    getNews = 1
//    getPlayoffSeries = 1
//    getRecentGames = 1
//    getRoster = 1
//    getTrades = 1
//    joinLeague = 1
//    //joinLeagueAfterDraft = 0
//    kickMember = 1
//    leaveLeague = 1
//    //playGame = 0
//    postNews = 1
//    promoteToGm = 1
//    rejectInvitation = 1
//    rejectTrade = 1
//    revokeInvitation = 1
//    revokeTrade = 1
//    resetLeague = 1
//    runDraft = 1
//    setLeagueMetadata = 1
//    setMemberMetadata = 1
//    //setRoster = 1
//    submitScore = 1
//    updateLeagueSettings = 1
}

logging = {
    level = INFO
}

