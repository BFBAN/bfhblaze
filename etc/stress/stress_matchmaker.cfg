#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 8000

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 30

    # Delay between starting instances in milliseconds
    instance-delay = 10

    # Delay between starting blocks in milliseconds
    block-delay = 500
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 2

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"

    express-pc-login = true

    # Define the TOS version used when creating new accounts.
    tos = "2.0"

    xbox360Accounts = [
#include "stress/xbox360.cfg"
    ]

}

#
# Define the list of stress modules that will be instantiated
#
modules = [ matchmaker ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    matchmaker = 1.0

}

#
# Configuration data specific to the dummy module
#
matchmaker = {
    # Define the number of milliseconds between RPC calls
    delay= 400

    # define the delay before starting matchmaking
    matchmakerDelay= 240000
    
    # define the maximum rate of users entering matchmaking
    initialMatchmakingSessionRate = 10
    maximumMatchmakingSessionRate = 1000
    matchmakingSessionRateIncreaseStep = 10
    matchmakingSessionRateIncreaseIntervalSeconds = 60
    
    # the chance that a user will log out during execute
    logoutChance = 0
    
    # Control whether a dummy instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true

    # Define which action to execute
    #action = noop
    action = findOrCreateGameSession

    #matchmaking session timeout in MS
    matchmakingTimeout = 15000
    #game state durations in MS
    initStateDurationMs = 3000
    preGameStateDurationMs = 1000
    inGameStateDurationMs = 10000   

    # game network topology
    # possible values
    # CLIENT_SERVER_PEER_HOSTED = 0, ///< client server peer hosted network topology
    # CLIENT_SERVER_DEDICATED = 1, ///< client server dedicated server topology
    # PEER_TO_PEER_FULL_MESH = 130, ///< Peer to peer full mesh network topology
    # PEER_TO_PEER_PARTIAL_MESH = 131 ///< Peer to peer partial mesh topology
    gameNetworkTopology = CLIENT_SERVER_DEDICATED
    
    
    # predefined rule preferences
    
    # game protocol version rule
    # disabling game protocol version rule is part of the game manager configuration
    useRandomizedGameProtocolVersionString = false
    # if false, use this game protocol version string for matchmaking
    gameProtocolVersionString = stressTester
    
    
    # game size rule
    # comment out threshold name to disable rule
    gameSizeMinFitThresholdName = testDecay
    minPlayerCount = 2
    minPlayerCountSeed = 8
    maxPlayerCountSeed = 20
    # this is the percentage of the difference between min & max player count to use as the desired player count
    desiredGameSizePercent = 80
    gameSizeIsSingleGroupMatch = true
    
    # ranked game rule
    rankedGameFitThresholdName = testDecay
    unrankedFrequency = 25
    rankedFrequency = 50
    randomFrequency = 10
    abstainFrequency = 15
    
    # skill rule
    skillRuleName = skillA_Rule
    skillRuleFitThresholdName = testDecay
    userSkillValueOverrride = true
    minimumSkill = 200
    maximumSkill = 9000
    
    # dnf rule
    # the maximum acceptable DNF value
    maxDNFValue = 100

    # host balancing rule
    # comment out threshold name to disable rule
    hostBalancingFitThresholdName = matchAny
    
    # host viability rule
    # comment out threshold name to disable rule
    hostViabilityFitThresholdName = hostViability
    
    # ping site rule
    # comment out threshold name to disable rule
    # pingSiteFitThresholdName = quickMatch
    
    
    
    
    
    # generic rule configs

    genericRules = {
	    playerAttribRule = {
		    ruleFrequency = 100 // frequency for the rule to be used at all (simple die roll, independent of other rules)
		    minFitThresholdValues = {
		        requireExactMatch = 1
		        quickMatch = 50
		        requireDecay = 49
		    }
		    valueFrequencies = {
			    Large = 40
			    Medium = 20
			    Small = 10
			    random = 20
			    abstain = 10
		    }
		    playerAttributeName = playerAttrib1
		    playerAttributeFrequencies = {
			    Large = 50
			    Medium = 20
			    Small = 30
		    }
	    }
	   gameAttribRule = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        requireExactMatch = 10
		        quickMatch = 50
			    requireDecay = 40
		    }
		    valueFrequencies = {
			    Large = 40
			    Medium = 20
			    Small = 10
			    random = 20
			    abstain = 10
		    }
		    gameAttributeName = gameAttrib1
	    }
	    playerStressArbitraryMatchRule = {
		    ruleFrequency = 100 // frequency for the rule to be used at all (simple die roll, independent of other rules)
		    minFitThresholdValues = {
		        requireExactMatch = 1
		        quickMatch = 99
		    }
		    valueFrequencies = {
			    1 = 50
			    2 = 20
			    3 = 30
		    }
		    playerAttributeName = playerStressAttrib1
		    playerAttributeFrequencies = {
			    1 = 50
			    2 = 20
			    3 = 30
		    }
	    }
	   gameStressArbitraryMatchRule = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        requireExactMatch = 10
		        quickMatch = 90
		    }
		    valueFrequencies = {
			    1 = 50
			    2 = 20
			    3 = 10
			    4 = 20
			    5 = 0
		    }
		    gameAttributeName = gameStressAttrib1
	    }
    }


    #
    # Game Manager utility configuration
    #
    
    # percent chance of a settings update on the ame
    gmGameSettingsRandomUpdates = 0.1
    # Number of cycles a game should last
    gmGameLifespan = 1000
    # Number of cycles a player should last
    gmGamePlayerLifespan = 400
    # Max number of players for a game (random number from min to this)
    gmGamePlayerSeed = 10
    # Minimum number of player in a game.
    gmGamePlayerLowerLimit = 6
    
    # playgroups configuration
    # chance a stress instance will be a pg leader
    pgLeaderFreq = 0
    # chance a stress instance will be a pg follower
    pgJoinerFreq = 0
    # Control the fraction of instances that create playgroups for the test.  The remaining fraction execute the test action RPCs
    pgMaxPlaygroups = 50
    pgCapacity = 1    
    # Control the how long the group remains alive - a scalar to delay (so time = grouptimescalar * delay) 
    pgLifespan = 200
    pgMemberLifespan = 5

}

logging = {
    level = INFO
}

servers = {
    server-0 = gosapp04.eao.abn-iad.ea.com:12000
    server-1 = gosapp04.eao.abn-iad.ea.com:12005
   # server-2 = gosapp04.eao.abn-iad.ea.com:12010
   # server-3 = gosapp04.eao.abn-iad.ea.com:12015
}



