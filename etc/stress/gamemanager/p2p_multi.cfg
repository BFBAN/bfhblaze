#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 10000

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.  To avoid overloading the server/DB,
# startup of stress instances is done in chunks with delays between each chunk until all instances
# have been started.  Care must be used when setting the block-delay and instance-delay values.
# (instance-delay * block-size) should be less than block-delay or you'll end up with overlap.
# Overlapped starts will still work but may not be the desired behaviour.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 10

    # Delay between starting instances in milliseconds
    instance-delay = 16

    # Delay between starting blocks in milliseconds
    block-delay = 233
}

#
# This following block lists servers in addition to the server passed in the command line the tester
# attempt to connect instances to.  For example if there are two servers listed here, and one in the command line,
# then instance 0 will connect to the command line server, 1 = server-0, 2 = server-1, etc.   Note if no server
# specified in the command line, the stress tester will still use the servers listed below if any are listed.
# 
servers = {
    server-0 = "gosapp03.eao.abn-iad.ea.com:12000"
    server-1 = "gosapp03.eao.abn-iad.ea.com:12005"
    server-2 = "gosapp03.eao.abn-iad.ea.com:12010"
    server-3 = "gosapp03.eao.abn-iad.ea.com:12015"
    server-4 = "gosapp04.eao.abn-iad.ea.com:12000"
    server-5 = "gosapp04.eao.abn-iad.ea.com:12005"
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 31000

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"
    
    # Specify whether to use express login instead of platform-specific login.
    express-pc-login = true

    # Define the TOS version used when creating new accounts.
    tos = "2.0"       
}

#
# Define the list of stress modules that will be instantiated
#
modules = [ gamemanager , matchmaker ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    gamemanager = 0.4
    matchmaker = 0.6
}

#
# Configuration data specific to the playgroups module
#
gamemanager = {
    # Define parameters used for the RPC action

    # Define the number of milliseconds between RPC calls
    delay = 1000
    
    # Control whether instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
    
    # Game Manager Utility config
    # Control the fraction of instances that create games for test
    gmMaxGames = 1000
    gmGamePlayerLowerLimit = 4
    gmGamePlayerSeed = 1
    gmGamePlayerMin = 2
    gmGameLifespan = 1500
    gmGameLifespanDeviation = 120
    gmGameStartTimer = 180        
    gmGamePlayerLifespan = 1500
    gmGamePlayerLifespanDeviation = 900
    gmNetworkTopology = PEER_TO_PEER_FULL_MESH
    gmGameSettingsRandomUpdates = 0.0  
    gmCensusSubscribe = true
    gmGameProtocolVersionString = stressTester      
    
    # GameManagerModule config
    gmmRoleIdleLifespan = 30
      
    # Control frequency of RPC calls for admins (value * 100 = pct.)    
    gmmKickPlayerRate = 0.001
    gmmSetAttributeRate = 0.00
    gmmSetPlayerAttributeRate = 0.00
    gmmBatchSetAttributesPreGame = true
    gmmBatchSetAttributesPostGame = true
    
    # Join Methods
    gmmJoinByUserRate = 0.30
    gmmJoinByBrowserRate = 0.05
    gmmBrowserListGameResetRate = 0.00
    
    # GameBrowser configuration
    listLife = 120
    listSize = 25
    subscriptionLists = true
    gbrGameSizeRuleMinFit = OSDK_matchAny
      
    # Control Game Attributes    
    gmmGameAttrKeys = [ OSDK_gameMode, OSDK_matchupHash, OSDK_roomId, OSDK_sponsoredEventId, OSDK_language,
            OSDK_ChlngrClubId, OSDK_clubId, OSDK_clubIdInverse, OSDK_clubLeagueId, OSDK_clubPlaygroupSize, OSDK_clubSkill, 
            fifaGameMode, fifaTeamLevel, fifaHalfLength, fifaCustomController, fifaGameSpeed, fifaPPT ]
    gmmGameAttrValues = {
        OSDK_gameMode = [abstain, 0, 1, 2, 3, 4, 5, 6, 8, 9 ]            
        OSDK_matchupHash = [ 0, 1, 2, 3, 4, 5, 6, 8, 9 ]
        OSDK_roomId = [ 0, 1, 2, 3, 4, 5, 6, 8, 9 ]
        OSDK_sponsoredEventId = [ 0, 1, 2, 3, 4, 5, 6, 8, 9 ]
        OSDK_language = [ abstain, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, random ]
        OSDK_ChlngrClubId = [ 0, 1, 2, 3, 4, 5, 6, 8, 9 ]
        OSDK_clubId = [ 0, 1, 2, 3, 4, 5, 6, 8, 9 ]
        OSDK_clubIdInverse = [ 0, 1, 2, 3, 4, 5, 6, 8, 9 ]
        OSDK_clubLeagueId = [ 0, 1, 2 ]
        OSDK_clubPlaygroupSize = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
        OSDK_clubSkill = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
        fifaGameMode = [ -1:0, 0:20, 1:0, 2:20, 3:20, 4:20, 5:0, 6:20 ]
        fifaTeamLevel = [ abstain, -1, 0, 1, 2, random ]
        fifaHalfLength = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
        fifaCustomController = [abstain, -1, 0, random ]
        fifaGameSpeed = [ 0, 1, 2 ]
        fifaPPT = [ 0, 1 ]
    }
    
    gmmGameReportTypes = [ normal:50, solo:25, league:25 ]

    # Executes no additional actions / tests
    action = noop  
 }   
 

#
# Configuration data specific to the dummy module
#
matchmaker = {
    # Define the number of milliseconds between RPC calls
    delay= 1000

    # define the delay before starting matchmaking
    matchmakerDelay= 0
    
    ################################################################################
    # Game Manager Util Config
    gmCensusSubscribe = true

    ################################################################################    
    # define the maximum rate of users entering matchmaking
    initialMatchmakingSessionRate = 10
    maximumMatchmakingSessionRate = 1000
    matchmakingSessionRateIncreaseStep = 10
    matchmakingSessionRateIncreaseIntervalSeconds = 60
    
    # the chance that a user will log out during execute
    logoutChance = 0
    
    # Control whether a dummy instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true

    # Define which action to execute
    #action = noop    
    action = findOrCreateGameSession
    gameNetworkTopology = PEER_TO_PEER_FULL_MESH

    #matchmaking session timeout in MS
    matchmakingTimeout = 45000
    
    #game state durations in MS
    initStateDurationMs = 1000
    preGameStateDurationMs = 180000
    inGameStateDurationMs = 1400000
    inGameStateDeviationMs = 600000

    ################################################################################
    # predefined rule preferences
    
    # game protocol version rule
    # disabling game protocol version rule is part of the game manager configuration
    useRandomizedGameProtocolVersionString = false
    # if false, use this game protocol version string for matchmaking
    gameProtocolVersionString = stressTester
    
    
    # game size rule
    # comment out threshold name to disable rule
    gameSizeMinFitThresholdName = OSDK_matchAny
    minPlayerCount = 1
    minPlayerCountSeed = 1
    maxPlayerCount = 4
    maxPlayerCountSeed = 1

    # this is the percentage of the difference between min & max player count to use as the desired player count 
    # try to join into games with at least one player
    desiredGameSizePercent = 100
    
    # ranked game rule
    #possible values
    #OSDK_matchExact = [0:1.0]
    #OSDK_matchAny = [0:0.0]
    rankedGameFitThresholdName = OSDK_matchAny
    unrankedFrequency = 25
    rankedFrequency = 50
    randomFrequency = 10
    abstainFrequency = 15
    
    # skill rule
    #possible values
    #OSDK_matchExact    = [0:1.0]
	#OSDK_matchAny      = [0:0.0]
	#OSDK_matchRelax    = [0:1.0, 2:0.993092, 4:0.957603, 6:0.895025, 8:0.779164, 10:0.5]
	#OSDK_skillWithin3  = [0:0.984525]
	#OSDK_skillWithin5  = [0:0.957603]
	#OSDK_skillWithin7  = [0:0.918594]
	#OSDK_skillWithin10 = [0:0.840896]
	#OSDK_skillWithin20 = [0:0.5]
	
    # skillRuleName = OSDK_skillLevel
    # skillRuleFitThresholdName = OSDK_matchRelax
    userSkillValueOverrride = true
    minimumSkill = 1
    maximumSkill = 99
    
    # dnf rule
    # the maximum acceptable DNF value
    maxDNFValue = 100

    # host balancing rule
    # comment out threshold name to disable rule
    #possible values
    # OSDK_matchAny = [ 0:HOSTS_UNBALANCED ]
    hostBalancingFitThresholdName = OSDK_matchAny
    
    # host viability rule
    # comment out threshold name to disable rule
    # possible values
    # OSDK_connAssured = [0:CONNECTION_ASSURED]
    # OSDK_connLikely = [0:CONNECTION_LIKELY]
    # OSDK_connUnlikely = [0:CONNECTION_UNLIKELY]
    # hostViabilityFitThresholdName = OSDK_connUnlikely
    
    # ping site rule
    # comment out threshold name to disable rule
    # possible values
    # OSDK_matchExact    = [0:1.0]
    # OSDK_matchAny      = [0:0.0]
    # OSDK_matchRelax    = [0:1.0, 5:0.8, 10:0.5]
    # pingSiteFitThresholdName = quickMatch
                  
    ################################################################################
    # generic rule configs

    genericRules = {
        OSDK_matchupHash = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10   
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_matchupHash
	    }
	    OSDK_roomId  = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10    
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_roomId
	    }
	    OSDK_sponsoredEventId = {
		    ruleFrequency = 25
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_sponsoredEventId
	    }
	    OSDK_ChlngrClubId = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_ChlngrClubId
	    }
	    OSDK_clubId = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_clubId
	    }
	    OSDK_clubIdInverse = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_clubIdInverse
	    }
	    OSDK_clubLeagueId = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 60
                #OSDK_matchRelax = [0:1.0, 5:0.8]
                OSDK_matchRelax = 30
		    }
		    valueFrequencies = {
		        0 = 33
		        1 = 34
		        2 = 33
		    }
		    gameAttributeName = OSDK_clubLeagueId
	    }
	    OSDK_clubPlaygroupSize = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 30
                #OSDK_matchRelax = [0:1.0, 2:0.9, 4:0.8, 6:0.7, 8:0.6, 10:0.5, 12:0.4, 14:0.3, 16:0.2, 18:0.1]
                OSDK_matchRelax = 60
		    }
		    valueFrequencies = {
		        1 = 2
		        2 = 5
		        3 = 3
		        4 = 2
		        5 = 50
		        6 = 2
		        7 = 2
		        8 = 2
		        9 = 2
		        10 = 30
		    }
		    gameAttributeName = OSDK_clubPlaygroupSize
	    }
	    OSDK_clubSkill = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 30
                #OSDK_matchRelax = [0:1.0, 2:0.9, 4:0.8, 6:0.7, 8:0.6, 10:0.5, 12:0.4, 14:0.3, 16:0.2, 18:0.1]
                OSDK_matchRelax = 60
		    }
		    valueFrequencies = {
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		        10 = 10
		    }
		    gameAttributeName = OSDK_clubSkill
	    }
	    OSDK_language = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 5
		        -1 = 5
		        0 = 10
		        1 = 10
		        2 = 5
		        3 = 5
		        4 = 5
		        5 = 5
		        6 = 5
		        7 = 5
		        8 = 5
		        9 = 5
		        10 = 5
		        11 = 5
		        12 = 5
		        13 = 5
		        14 = 5
		        15 = 5
		    }
		    gameAttributeName = OSDK_language
	    }
	    OSDK_gameMode = {
		    ruleFrequency = 0
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 90
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 10
		    }
		    valueFrequencies = {
		        abstain = 0
		        0 = 20
		        1 = 0
		        2 = 20
		        3 = 20
		        4 = 20
		        5 = 0
		        6 = 20
                //fifa config omits 7 as possible value
                8 = 0
                9 = 0
		    }
		    gameAttributeName = OSDK_gameMode
	    }    
        fifaGameMode  = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                     # OSDK_matchExact = [0:EXACT_MATCH_REQUIRED]
                     OSDK_matchExact = 100                
		    }
		    valueFrequencies = {
		        -1 = 0
		        0 = 20
		        1 = 0
		        2 = 20
		        3 = 20
		        4 = 20
		        5 = 0
		        6 = 20
		    }
		    gameAttributeName = fifaGameMode   
	    }
        fifaTeamLevel = {
		    ruleFrequency = 50
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 25
                #OSDK_matchAny = [0:1.0, 10:0.8, 15:0.5, 20:0.0]
                OSDK_matchAny = 75
		    }
		    valueFrequencies = {
		        abstain = 15
                    -1 = 15
		        0 = 15
		        1 = 15
		        2 = 15
		        random = 25
		    }
		    gameAttributeName = fifaTeamLevel   
	    }
	    fifaHalfLength = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 15
				#OSDK_matchAny = [0:1.0, 10:0.8, 15:0.5, 20:0.0]
                OSDK_matchAny = 85
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 5
		        10 = 5
		    }
		    gameAttributeName = fifaHalfLength     
	    }
	    fifaCustomController = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 15
				#OSDK_matchAny = [0:1.0, 10:0.5]
                OSDK_matchAny = 85
		    }
		    valueFrequencies = {
		        abstain = 25
                -1 = 25
		        0 = 25
		        random = 25
		    }
		    gameAttributeName = fifaCustomController   
	    }
	    fifaGameSpeed = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 15
				#OSDK_matchAny = [0:1.0, 10:0.5]
                OSDK_matchAny = 85
		    }
		    valueFrequencies = {
		        0 = 33
		        1 = 33
		        2 = 34
		    }
		    gameAttributeName = fifaGameSpeed    
	    }	   
	    fifaPPT  = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 15
				#OSDK_matchAny = [0:1.0, 10:0.5]
                OSDK_matchAny = 85
		    }
		    valueFrequencies = {
		        0 = 50
		        1 = 50
		    }
		    gameAttributeName = fifaPPT     
	    }	    
    }
    
    ################################################################################
    # Playgroups configuration
    #
    
    # chance a stress instance will be a pg leader
    pgLeaderFreq = 0
    # chance a stress instance will be a pg follower
    pgJoinerFreq = 0
    # Control the fraction of instances that create playgroups for the test.  The remaining fraction execute the test action RPCs
    pgMaxPlaygroups = 1
    pgCapacity = 1    
    # Control the how long the group remains alive - a scalar to delay (so time = grouptimescalar * delay) 
    pgLifespan = 200
    pgMemberLifespan = 5
}


logging = {
    level = INFO
    
    categories = {
       gamemanager = DEBUG
    }
}
