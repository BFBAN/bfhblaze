#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 8000

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 30

    # Delay between starting instances in milliseconds
    instance-delay = 10

    # Delay between starting blocks in milliseconds
    block-delay = 500
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 2

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"

    express-pc-login = true

    # Define the TOS version used when creating new accounts.
    tos = "2.0"

    xbox360Accounts = [
#include "stress/xbox360.cfg"
    ]

}

#
# Define the list of stress modules that will be instantiated
#
modules = [ matchmaker ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    matchmaker = 1.0

}

#
# Configuration data specific to the dummy module
#
matchmaker = {
    # Define the number of milliseconds between RPC calls
    delay= 400

    # define the delay before starting matchmaking
    matchmakerDelay= 240000
    
    # define the maximum rate of users entering matchmaking
    initialMatchmakingSessionRate = 10
    maximumMatchmakingSessionRate = 1000
    matchmakingSessionRateIncreaseStep = 10
    matchmakingSessionRateIncreaseIntervalSeconds = 60
    
    # the chance that a user will log out during execute
    logoutChance = 0
    
    # Control whether a dummy instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true

    # Define which action to execute
    #action = noop
    action = findOrCreateGameSession

    #matchmaking session timeout in MS
    matchmakingTimeout = 15000
    #game state durations in MS
    initStateDurationMs = 3000
    preGameStateDurationMs = 1000
    inGameStateDurationMs = 10000   

    # predefined rule preferences
    
    # game protocol version rule
    # disabling game protocol version rule is part of the game manager configuration
    useRandomizedGameProtocolVersionString = false
    # if false, use this game protocol version string for matchmaking
    gameProtocolVersionString = stressTester
    
    
    # game size rule
    # comment out threshold name to disable rule
    # Possible values for NHL:
    # OSDK_matchAny   = [0:0.0]
	# OSDK_matchExact = [0:1.0]
	# OSDK_matchRelax = [0:1.0, 1:0.5]
    gameSizeMinFitThresholdName = OSDK_matchRelax
    minPlayerCount = 2
    minPlayerCountSeed = 2
    maxPlayerCountSeed = 10
    # this is the percentage of the difference between min & max player count to use as the desired player count
    desiredGameSizePercent = 100
    
    # ranked game rule
    #possible values
    #OSDK_matchExact = [0:1.0]
    #OSDK_matchAny = [0:0.0]
    rankedGameFitThresholdName = OSDK_matchAny
    unrankedFrequency = 25
    rankedFrequency = 50
    randomFrequency = 10
    abstainFrequency = 15
    
    # skill rule
    skillRuleName = OSDK_skillLevel
    #possible values
    #OSDK_matchExact    = [0:1.0]
	#OSDK_matchAny      = [0:0.0]
	#OSDK_matchRelax    = [0:1.0, 2:0.993092, 4:0.957603, 6:0.895025, 8:0.779164, 10:0.5]
	#OSDK_skillWithin3  = [0:0.984525]
	#OSDK_skillWithin5  = [0:0.957603]
	#OSDK_skillWithin7  = [0:0.918594]
	#OSDK_skillWithin10 = [0:0.840896]
	#OSDK_skillWithin20 = [0:0.5]
    skillRuleFitThresholdName = OSDK_matchRelax
    userSkillValueOverrride = true
    minimumSkill = 200
    maximumSkill = 9000
    
    # dnf rule
    # the maximum acceptable DNF value
    maxDNFValue = 100

    # host balancing rule
    # comment out threshold name to disable rule
    #possible values
    # OSDK_matchAny = [ 0:HOSTS_UNBALANCED ]
    hostBalancingFitThresholdName = OSDK_matchAny
    
    # host viability rule
    # comment out threshold name to disable rule
    # possible values
    # OSDK_connAssured = [0:CONNECTION_ASSURED]
    # OSDK_connLikely = [0:CONNECTION_LIKELY]
    # OSDK_connUnlikely = [0:CONNECTION_UNLIKELY]
    hostViabilityFitThresholdName = OSDK_connUnlikely
    
    # ping site rule
    # comment out threshold name to disable rule
    # possible values
    # OSDK_matchExact    = [0:1.0]
    # OSDK_matchAny      = [0:0.0]
    # OSDK_matchRelax    = [0:1.0, 5:0.8, 10:0.5]
    # pingSiteFitThresholdName = quickMatch
    
    
    
    
    
    # generic rule configs

    genericRules = {
    	   OSDK_matchupHash = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10   
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_matchupHash
	    }
	    OSDK_roomId  = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10    
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_roomId
	    }
	    OSDK_sponsoredEventId = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_sponsoredEventId
	    }
	    OSDK_ChlngrClubId = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_ChlngrClubId
	    }
	    OSDK_clubId = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_clubId
	    }
	    OSDK_clubIdInverse = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        # OSDK_matchAny = [0:0.0]
       		    OSDK_matchAny = 90
		        #OSDK_matchExact = [0:1.0]
       		    OSDK_matchExact = 10  
		    }
		    valueFrequencies = {
		        0 = 10
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		    }
		    gameAttributeName = OSDK_clubIdInverse
	    }
	    OSDK_clubLeagueId = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 60
                #OSDK_matchRelax = [0:1.0, 5:0.8]
                OSDK_matchRelax = 30
		    }
		    valueFrequencies = {
		        0 = 33
		        1 = 34
		        2 = 33
		    }
		    gameAttributeName = OSDK_clubLeagueId
	    }
	    OSDK_clubPlaygroupSize = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 30
                #OSDK_matchRelax = [0:1.0, 2:0.9, 4:0.8, 6:0.7, 8:0.6, 10:0.5, 12:0.4, 14:0.3, 16:0.2, 18:0.1]
                OSDK_matchRelax = 60
		    }
		    valueFrequencies = {
		        1 = 2
		        2 = 5
		        3 = 3
		        4 = 2
		        5 = 50
		        6 = 2
		        7 = 2
		        8 = 2
		        9 = 2
		        10 = 30
		    }
		    gameAttributeName = OSDK_clubPlaygroupSize
	    }
	    OSDK_clubSkill = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 30
                #OSDK_matchRelax = [0:1.0, 2:0.9, 4:0.8, 6:0.7, 8:0.6, 10:0.5, 12:0.4, 14:0.3, 16:0.2, 18:0.1]
                OSDK_matchRelax = 60
		    }
		    valueFrequencies = {
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		        10 = 10
		    }
		    gameAttributeName = OSDK_clubSkill
	    }
	    OSDK_language = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 5
		        -1 = 5
		        0 = 10
		        1 = 10
		        2 = 5
		        3 = 5
		        4 = 5
		        5 = 5
		        6 = 5
		        7 = 5
		        8 = 5
		        9 = 5
		        10 = 5
		        11 = 5
		        12 = 5
		        13 = 5
		        14 = 5
		        15 = 5
		    }
		    gameAttributeName = OSDK_language
	    }
	    OSDK_gameMode = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 90
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 10
		    }
		    valueFrequencies = {
		        abstain = 13
		        0 = 13
		        1 = 13
		        2 = 13
		        3 = 12
		        4 = 12
		        5 = 12
		        6 = 12
		    }
		    gameAttributeName = OSDK_gameMode
	    }
	    gamePoints = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 25
		        1 = 25
		        5 = 25
		        10 = 25
		    }
		    gameAttributeName = gamePoints
	    }
	    PeriodLength = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 15
		        5 = 25
		        10 = 20
		        15 = 20
		        20 = 20
		    }
		    gameAttributeName = PeriodLength
	    }
	    Rules = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 15
		        0 = 25
		        1 = 20
		        2 = 20
		        3 = 20
		    }
		    gameAttributeName = Rules 
	    }
	    Injuries = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = Injuries 
	    }
	    Fighting = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = Fighting  
	    }
	    Penalties = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = Penalties   
	    }
	    CreatedPlays = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = CreatedPlays   
	    }
	    ShootoutRules = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = ShootoutRules   
	    }
	    ShootoutGoalieControl = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = ShootoutGoalieControl   
	    }
	    ShootoutShotsPerRound = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 13
		        3 = 13
		        4 = 13
		        5 = 13
		        6 = 12
		        7 = 12
		        8 = 12
		        9 = 12
		    }
		    gameAttributeName = ShootoutShotsPerRound   
	    }
	    ShootoutSkillMatchup = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 30
                #OSDK_matchRelax = [0:1.0, 2:0.9, 4:0.8, 6:0.7, 8:0.6, 10:0.5, 12:0.4, 14:0.3, 16:0.2, 18:0.1, 20:0.0]
                OSDK_matchRelax = 60
		    }
		    valueFrequencies = {
		        1 = 10
		        2 = 10
		        3 = 10
		        4 = 10
		        5 = 10
		        6 = 10
		        7 = 10
		        8 = 10
		        9 = 10
		        10 = 10
		    }
		    gameAttributeName = ShootoutSkillMatchup
	    }
	    ClubRules = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
                #OSDK_matchExact = [0:1.0]
                OSDK_matchExact = 10
                #OSDK_matchAny = [0:0.0]
                OSDK_matchAny = 90
		    }
		    valueFrequencies = {
		        abstain = 10
		        0 = 45
		        1 = 45
		    }
		    gameAttributeName = ClubRules   
	    }
    }


    #
    # Game Manager utility configuration
    #
    
    # percent chance of a settings update on the ame
    gmGameSettingsRandomUpdates = 0.1
    # Number of cycles a game should last
    gmGameLifespan = 1000
    # Number of cycles a player should last
    gmGamePlayerLifespan = 400
    # Max number of players for a game (random number from min to this)
    gmGamePlayerSeed = 10
    # Minimum number of player in a game.
    gmGamePlayerLowerLimit = 6
    
    # playgroups configuration
    # chance a stress instance will be a pg leader
    pgLeaderFreq = 0
    # chance a stress instance will be a pg follower
    pgJoinerFreq = 0
    # Control the fraction of instances that create playgroups for the test.  The remaining fraction execute the test action RPCs
    pgMaxPlaygroups = 50
    pgCapacity = 1    
    # Control the how long the group remains alive - a scalar to delay (so time = grouptimescalar * delay) 
    pgLifespan = 200
    pgMemberLifespan = 5

}

logging = {
    level = INFO
}

servers = {
    server-0 = gosapp04.eao.abn-iad.ea.com:12000
    server-1 = gosapp04.eao.abn-iad.ea.com:12005
   # server-2 = gosapp04.eao.abn-iad.ea.com:12010
   # server-3 = gosapp04.eao.abn-iad.ea.com:12015
}



