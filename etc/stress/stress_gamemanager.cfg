#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 200

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.  To avoid overloading the server/DB,
# startup of stress instances is done in chunks with delays between each chunk until all instances
# have been started.  Care must be used when setting the block-delay and instance-delay values.
# (instance-delay * block-size) should be less than block-delay or you'll end up with overlap.
# Overlapped starts will still work but may not be the desired behaviour.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 1

    # Delay between starting instances in milliseconds
    instance-delay = 0

    # Delay between starting blocks in milliseconds
    block-delay = 500
}

#
# This following block lists servers in addition to the server passed in the command line the tester
# attempt to connect instances to.  For example if there are two servers listed here, and one in the command line,
# then instance 0 will connect to the command line server, 1 = server-0, 2 = server-1, etc.   Note if no server
# specified in the command line, the stress tester will still use the servers listed below if any are listed.
# 
servers = {
}
#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 1

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"
    
    # Specify whether to use express login instead of platform-specific login.
    express-pc-login = true

    # Define the TOS version used when creating new accounts.
    tos = "2.0"       
}

#
# Define the list of stress modules that will be instantiated
#
modules = [ gamemanager, matchmaker ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    gamemanager = 0.10
    matchmaker = 0.90
}

#
# Configuration data specific to the playgroups module
#
gamemanager = {
   # Define parameters used for the RPC action

    # Define the number of milliseconds between RPC calls
    delay = 1000
    
    # Control whether instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
    
    # Game Manager Utility config
    # Control the fraction of instances that create games for test
    gmMaxGames = 10
    gmGamePlayerLowerLimit = 4
    gmGamePlayerSeed = 1
    gmGamePlayerMin = 2
    gmGameLifespan = 120
    gmGameLifespanDeviation = 15
    gmGameStartTimer = 30
    gmGamePlayerLifespan = 120
    gmGamePlayerLifespanDeviation = 5
    gmNetworkTopology = PEER_TO_PEER_FULL_MESH
    gmGameSettingsRandomUpdates = 0.0    
    gmGameProtocolVersionString = stressTester
    
    # GameManagerModule config
    gmmRoleIdleLifespan = 10
    
    # Control frequency of RPC calls for admins (value * 100 = pct.)    
    gmmKickPlayerRate = 0.001
    gmmSetAttributeRate = 0.00
    gmmSetPlayerAttributeRate = 0.00
    gmmBatchSetAttributesPreGame = true
    gmmBatchSetAttributesPostGame = true
    
    # Join Methods
    gmmJoinByUserRate = 0.5
    gmmJoinByBrowserRate = 0.5
    gmmBrowserListGameResetRate = 0.0
    
    # GameBrowser configuration
    listLife = 45
    listSize = 25
    subscriptionLists = true
    gbrGameSizeRuleMinFit = matchAny
                  
    # Control Game Attributes    
    gmmGameAttrKeys = [ gameAttrib1, ISmode, ISmap, gameStressAttrib1 ]
    gmmGameAttrValues = {
        gameAttrib1 = [ Large:50, Medium:25, Small:25, random:0, abstain:0 ]
        gameStressAttrib1 = [ 1:50 , 2:50 ]        
        ISmode = [ deathmatch:50, tdeathmatch:50 ]
        ISmap = [ map_1:33, map_2:33, map_3:33 ]
    }  

    # Executes no additional actions / tests
    action = noop  
}

#
# Configuration data specific to the dummy module
#
matchmaker = {
    # Define the number of milliseconds between RPC calls
    delay= 1000

    # define the delay before starting matchmaking
    matchmakerDelay= 0
    
    # define the maximum rate of users entering matchmaking
    initialMatchmakingSessionRate = 10
    maximumMatchmakingSessionRate = 100
    matchmakingSessionRateIncreaseStep = 10
    matchmakingSessionRateIncreaseIntervalSeconds = 60
    
    # the chance that a user will log out during execute
    logoutChance = 0
    
    # Control whether a dummy instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true

    # Define which action to execute
    #action = noop
    action = findOrCreateGameSession

    #matchmaking session timeout in MS
    matchmakingTimeout = 45000
    
    #game state durations in MS
    initStateDurationMs = 1000
    preGameStateDurationMs = 10000
    inGameStateDurationMs = 100000   

    # predefined rule preferences
    
    # game protocol version rule
    # disabling game protocol version rule is part of the game manager configuration
    useRandomizedGameProtocolVersionString = false
    # if false, use this game protocol version string for matchmaking
    gameProtocolVersionString = stressTester
    
    
    # game size rule
    # comment out threshold name to disable rule
    gameSizeMinFitThresholdName = matchAny
    minPlayerCount = 1
    minPlayerCountSeed = 1
    maxPlayerCount = 4
    maxPlayerCountSeed = 1

    # this is the percentage of the difference between min & max player count to use as the desired player count
    desiredGameSizePercent = 50
    
    # ranked game rule
    # rankedGameFitThresholdName = testDecay
    unrankedFrequency = 25
    rankedFrequency = 50
    randomFrequency = 10
    abstainFrequency = 15
    
    # skill rule
    # skillRuleName = skillA_Rule
    # skillRuleFitThresholdName = testDecay
    userSkillValueOverrride = true
    minimumSkill = 200
    maximumSkill = 9000
    
    # dnf rule
    # the maximum acceptable DNF value
    maxDNFValue = 100

    # host balancing rule
    # comment out threshold name to disable rule
    # hostBalancingFitThresholdName = matchAny
    
    # host viability rule
    # comment out threshold name to disable rule
    # hostViabilityFitThresholdName = hostViability
    
    # ping site rule
    # comment out threshold name to disable rule
    # pingSiteFitThresholdName = quickMatch
                  
    # generic rule configs

    genericRules = {	    
	   gameAttribRule = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        requireExactMatch = 0
		        quickMatch = 50
			    requireDecay = 50
		    }
		    valueFrequencies = {
			    Large = 34
			    Medium = 33
			    Small = 33
			    random = 0
			    abstain = 0
		    }
		    gameAttributeName = gameAttrib1
	    }
	   gameStressArbitraryMatchRule = {
		    ruleFrequency = 100
		    minFitThresholdValues = {
		        requireExactMatch = 0
		        quickMatch = 100
		    }
		    valueFrequencies = {
			    1 = 50
			    2 = 50
			    3 = 0
			    4 = 0
			    5 = 0
		    }
		    gameAttributeName = gameStressAttrib1
	    }
    }


    #
    # Game Manager utility configuration
    #
    
    # percent chance of a settings update on the ame
    gmGameSettingsRandomUpdates = 0.1
    # Number of cycles a game should last
    gmGameLifespan = 0
    # Number of cycles a player should last
    gmGamePlayerLifespan = 0
    # Max number of players for a game (random number from min to this)
    gmGamePlayerSeed = 0
    # Minimum number of player in a game.
    gmGamePlayerLowerLimit = 0
    
    # playgroups configuration
    # chance a stress instance will be a pg leader
    pgLeaderFreq = 0
    # chance a stress instance will be a pg follower
    pgJoinerFreq = 0
    # Control the fraction of instances that create playgroups for the test.  The remaining fraction execute the test action RPCs
    pgMaxPlaygroups = 1
    pgCapacity = 1    
    # Control the how long the group remains alive - a scalar to delay (so time = grouptimescalar * delay) 
    pgLifespan = 200
    pgMemberLifespan = 5

}



logging = {
    level = INFO
    
    categories = {
       gamemanager = DEBUG
    }
}
