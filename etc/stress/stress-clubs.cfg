#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 4

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 100

    # Delay between starting instances in milliseconds
    instance-delay = 20

    # Delay between starting blocks in milliseconds
    block-delay = 5000
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 2

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"

    # Define the TOS version used when creating new accounts.
    tos = "2.0"

    # define the authentication mechanism to use: pc, ps3, or xbox360
    type = xbox360

    xbox360Accounts = [
#include "stress/xbox360.cfg"
    ]

}

#
# Define the list of stress modules that will be instantiated
#
modules = [ clubs ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    clubs = 1.0
}

#
# Configuration data specific to the clubs module
#
clubs = {
    # playClubGame will submit offline game reports
    # and automatically fill in fields that have
    # offlineSource = report
    # please check your gamereporting.cfg 
    # to ensure that the proper configuration is in place
    configFilePath = {
        gamereporting = "component/gamereporting.cfg",
        stats = "component/stats/stats.cfg"
    }
    gameType = "arsonClub"
    login = true
    waitActive = true
    delay = 10

    # Testing conditions, the following values are valid:
    #    gameMature:  recreate database (fill users table and clubs tables)
    #    gameStartup: do not recreate database  
    testingConditions = mature

    recreateDatabase = false

    action = simulateProduction

    #
    # Database creation parameters
    #

    # target database for clubs
    dbhost = tiger.online.ea.com
    dbport = 3306
    database = "clubs_tracy"
    dbuser = "root"
    dbpass = ""


    # patterns and params for generated clubs
    # persona-format = "s%05x"
    # email-format = "blaze-stress%05x@ea.com"
    persona-format = "gosstress%06d"
    email-format = "gosstress%06d@ea.com"

    clubname = "club%05x"
    abbrev = "%05x"
    desc = "%05x"
    
    # number of clubs with speciied number of members
    clubCountMembers_1 = 10
    clubCountMembers_3 = 20
    clubCountMembers_6 = 15
    clubCountMembers_12 = 5
    clubCountMembers_20 = 5
    clubCountMembers_30 = 1
    clubCountMembers_50 = 1
    totalUsers = 1000
    
    # patterns and params for generating news
    newsBody= "This is news %05x"
    newsPerClub = 10

    # parameters for awards
    awardsPerClub = 5

    # parameters for records
    recordsPerClub = 2

    #
    # Test parameters
    #
    
    # Defines how many clubs to fetch in getClubs call
    clubsToGet = 10
    
    # Defines how many users to fetch in getClubMembershipForUsers call
    clubMembershipsToGet = 100

    # findClubs parameters
    # probability to search by name is 90%
    findClubsByName = 90    
    findClubsByLanguage = 20
    findClubsByTeamId = 10
    findClubsByAbbrev = 10
    findClubsByAcceptanceFlags = 60
    findClubsBySeasonLevel = 10
    findClubsByRegion = 50
    findClubsByMinMemberCount = 10
    findClubsByMaxMemberCount = 5
    findClubsByClubFilterList = 5
    findClubsByMemberFilterList = 50
    findClubsSkipMetadata = 80
    # max count of resluts to return
    findClubsMaxResultCount = 100
    
    # relative weight distribution for 
    # production simulation
    actionWeightDistribution = {
        getClubs = 326
        getAwards = 160
        findClubs = 278
        getClubsComponentSettings = 138
        getMembers = 358
        getNews = 126
        createClub = 4
        getClubRecordbook = 8
        petition = 14
        joinClub = 3
        postNews = 41
        playClubGame = 442
    }
    
    maxNoLeaveClubId = 500

    # value to use to seed srand() with
    # if not specified, it will use current time
    #randSeed = 1

}

logging = {
    level = INFO
}



