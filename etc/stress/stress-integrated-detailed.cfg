#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = #NUM_CONNECTIONS#

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = #SERVER_NUCLEUS_POOL_SIZE# * 4

    # Delay between starting instances in milliseconds
    instance-delay = 20

    # Delay between starting blocks in milliseconds
    block-delay = #SERVER_NUCLEUS_POOL_SIZE# * 4 * 20
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 2

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"

    # Define the TOS version used when creating new accounts.
    tos = "2.0"

    # define the authentication mechanism to use: pc, ps3, or xbox360
    type = xbox360

    xbox360Accounts = [
    #include "stress/xbox360.cfg"
    ]

}

#
# Define the list of stress modules that will be instantiated
#
modules = [ authentication, clubs, league, locker, gamehistory, registration, rooms, stats ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    authentication = 0.10
    clubs = 0.25
    gamehistory = 0.10
    league = 0.10
    rooms = 0.25
    stats = 0.10
    registration = 0.05
    locker = 0.05
}


#
# Configuration data specific to the authentication module
#
authentication = {
    // Define which RPC to use
    action = AuthenticationStressTest
    // if true the values from 'xbox360.cfg' file are used as external id and gamer tag
    // otherwise values are generated based on sequential number
    useXboxStockAcc = true 

    // Random generator seed, if < 0, used srand(time)
    randSeed = -1
    minAccId = 1000000   // used to generate persona name and e-mail
    maxAccId = 1014000
    email-format = "blaze-stresx%05x@ea.com"
    persona-format = "x%05x"
        
    // hitRate expresses probability of hitting RPC. Values are relative and are normalized against sum 
    // type of value is 'double'.
    scenarioList = {
        loginAcc = { hitRate = 0 },
        loginAccPers = { hitRate = 0 },
        createAcc = { hitRate = 0 },
        createXboxAcc = { hitRate = 0 },
        createPs3Acc = { hitRate = 0 },
        expressLogin = { hitRate = 0 },
        getTosInfoAndAccept = { hitRate = 0 },
        xboxLogin = { hitRate = 65 },
        entitlementsSc = { hitRate = 0 }
    }

    // Define the number of milliseconds between RPC calls
    delay = 50000

    // Control whether an instance needs to authenticate its user before issuing its configured
    // RPC calls.
    login = false

    xuids = [
    #include "stress/xbox360.cfg"
    ]
}

#
# Configuration data specific to the clubs module
#
clubs = {
    # playClubGame will submit offline game reports
    # and automatically fill in fields that have
    # offlineSource = report
    # please check your gamereporting.cfg 
    # to ensure that the proper configuration is in place    
    configFilePath = {
        gamereporting = "component/gamereporting.cfg",
        stats = "component/stats/stats.cfg"
    }
    gameType = "arsonClub"
    login = true
    stress_login = true
    waitActive = false
    delay = 30000

    # Testing conditions, the following values are valid:
    #    gameMature:  recreate database (fill users table and clubs tables)
    #    gameStartup: do not recreate database  
    testingConditions = mature

    recreateDatabase = false

    action = simulateProduction

    # patterns and params for generated clubs
    persona-format = "gosstress%06d"
    email-format = "gosstress%06d@ea.com"
    start-index = 1000

    clubname = "club%05x"
    abbrev = "%05x"
    desc = "%05x"
    
    # number of clubs with specified number of members
    clubCountMembers_1 = 1000
    clubCountMembers_3 = 100
    clubCountMembers_6 = 150
    clubCountMembers_12 = 50
    clubCountMembers_20 = 10
    clubCountMembers_30 = 10
    clubCountMembers_50 = 10
    totalUsers = 20000
    
    # patterns and params for generating news
    newsBody= "This is news %05x"
    newsPerClub = 10

    # parameters for awards
    awardsPerClub = 5

    # parameters for records
    recordsPerClub = 2

    #
    # Test parameters
    #
    
    # Defines how many clubs to fetch in getClubs call
    clubsToGet = 100
    
    # Defines how many users to fetch in getClubMembershipForUsers call
    clubMembershipsToGet = 100

    # findClubs parameters
    # probability to search by name is 90%
    findClubsByName = 30	
    findClubsByLanguage = 20
    findClubsByTeamId = 10
    findClubsByAbbrev = 10
    findClubsByAcceptanceFlags = 60
    findClubsBySeasonLevel = 10
    findClubsByRegion = 50
    findClubsByMinMemberCount = 10
    findClubsByMaxMemberCount = 5
    findClubsByClubFilterList = 5
    findClubsByMemberFilterList = 10
    findClubsSkipMetadata = 80
    # max count of resluts to return
    findClubsMaxResultCount = 100
    
    # relative weight distribution for
    # production simulation
    actionWeightDistribution = {
        getClubs = 326
        getAwards = 160
        findClubs = 278
        getClubsComponentSettings = 138
        getMembers = 358
        getNews = 126
        createClub = 4
        getClubRecordbook = 8
        petition = 72
        joinClub = 3
        postNews = 41
        #playClubGame = 442
        getClubMembershipForUsers = 10
    }
    # value to use to seed srand() with
    # if not specified, it will use current time
    #randSeed = 1
}

#
# Configuration data specific to the dummy module
#
gamehistory = {
    configFilePath = {
        gamereporting = "component/gamereporting.cfg"
        stats = "component/stats/stats.cfg"
    }

    # Define which RPC to use
    #action = submitOfflineGameReport
    #action = getGameReports
    #action = getGameReportViewInfoList
    #action = getGameReportView
    action = simulateProd
    
    # the game types to use to send reports
    reportGameTypes = [ arsonBasic ]
    
    # only applies to getGameReports
    queries = [ gameType3_skill_damping_query ]
    
    # only applies to getGameReportView
    views = [ my_recent_sample_games ]
    
    # only applies to simulateProd
    sim = {
        probability = {
            submitOfflineGameReport   = 50
            getGameReports            = 20
            getGameReportViewInfoList = 10
            getGameReportView         = 20
        }
        maxSleep = 2000
    }

    # Define the number of players in game
    maxPlayerSize = 5

    # Define the number of milliseconds between RPC calls
    delay = 60000

    # Control whether a game reporting instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
    stress_login = true
}

//
// Configuration data specific to the league module
//
league = {
    login = true
    stress_login = true

    // number of milliseconds between issuing commands
    delay = 30000

    statOutInterval = 1000
    
    // stop after a successful result of each configured action
    smokeTest = false

    // patterns and params for generated leagues
    persona-format = "s%05x"
    email-format = "blaze-stress%05x@ea.com"

    leaguename = "league%05x"
    abbrev = "%05x"
    desc = "%05x"

    // number of leagues with specified number of members
    leagueCountMembers_1 = 1000
    leagueCountMembers_3 = 100
    leagueCountMembers_6 = 150
    leagueCountMembers_12 = 50
    leagueCountMembers_20 = 50
    leagueCountMembers_32 = 10
    totalUsers = 20000

    // patterns and params for generating news
    newsBody= "This is news %05x"
    newsPerLeague = 10

    //
    // Test parameters
    //

    // sets defaults for non-overridden (unspecified) action/test distributions
    // the following values are valid:
    //    populate: grow the database (gradual DB population using RPC calls)
    //    simulate: simulate "typical-use" distribution of RPC calls
    //    custom:   only use override distribution parameters of actions/tests (if an action/test is unspecified, 0 is used)
    testMode = simulate

    // not sure if it matters, but set a limit for the number of invites a user can have
    userInviteLimit = 50

    // max count of results to return
    // if unspecified, defaults to hard-coded values in module
    findLeaguesMaxResults = 30
    getNewsMaxResults = 10
    getRecentGamesMaxResults = 50

    // draft settings
    // if unspecified, defaults to hard-coded values in module
    maxDraftMembers = 6
    draftProfileBatchSize = 100

    // game score settings
    // if unspecified, defaults to hard-coded values in module
    maxGameScore = 40

    // override distribution of actions/tests for the connections
    // note that actions/tests are not the same as RPC calls (actions/tests can call multiple RPCs in sequence)
    // unspecified (or commented-out) actions/tests use the default according to testing condition
//    acceptTrade = 1
//    createLeague = 1
//    deleteLeague = 1
//    //getInvitations = 1
//    //getLeague = 1
//    //getLeaguesByUser = 1
//    //getMembers = 1
//    getNews = 1
//    getPlayoffSeries = 1
//    getRecentGames = 1
//    getRoster = 1
//    getTrades = 1
//    joinLeague = 1
//    //joinLeagueAfterDraft = 0
//    kickMember = 1
//    leaveLeague = 1
//    //playGame = 0
//    postNews = 1
//    promoteToGm = 1
//    rejectInvitation = 1
//    rejectTrade = 1
//    revokeInvitation = 1
//    revokeTrade = 1
//    resetLeague = 1
//    runDraft = 1
//    setLeagueMetadata = 1
//    setMemberMetadata = 1
//    //setRoster = 1
//    submitScore = 1
//    updateLeagueSettings = 1
}

#
# Configuration data specific to the locker module
#
locker = {
    # Define parameters used for the RPC action
    #   contentCategory = the content category used in the action.
    #   createContentCount = create and confirm at most N content items
    #   deleteContentType = filters content to test by type "owner|copy|bookmark|all"
    #   listContentEntityId = retrieves this entity's locker contents
    contentCategory = "various"
    createContentCount = 1
    deleteContentType = "all"
    listContentEntityId = 0
    leaderboardType = "MOST_RECENT"
    leaderboardView = "overall"
    leaderboardRowCount = 100

    # Define which RPC to use
    # action = noop
    # action = createContent    
    # action = deleteContent
    # action = createAndDeleteContent
    # action = listContent    
    # action = listContentAndUpdateContentInfo
    # action = getTopN
    action = getTopNMacro
    
    # Define the number of milliseconds between RPC calls
    delay = 30000

    # num_trials = 1
    # num_execs_per_trial = 2
    # delay_per_trial = 1000

    # Control whether a dummy instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
    stress_login = true
}

#
# Configuration data specific to the rooms module
#
rooms = {
    # Define which RPC to use
    action = simulateProd
    
    # the category to put user created rooms in
    userCreatedCategoryId = 1
    
    # the view to use for performing actions
    activeViewId = 1
    
    sim = {
        joinProbablity = 30  //when not in a room
        createProbablity = 0 //when not in a room
		
        chatProbablity = 30  //when in a room
        leaveProbablity = 5 //when in a room
    
        maxSleep = 10000
    }

    # Define the number of milliseconds between RPC calls
    delay = 0

    # Control whether a rooms instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
    stress_login = true
}

#
# Configuration data specific to the registration module
#
registration = {

    # Define which RPC to use
    #action = addrow
    #action = ban
    #action = check
    #action = remrow
    #action = returnusers
    #action = updateflags
    #action = updatenote
    action = simulateProd

    # only applies to simulateProd
    sim = {
        probability = {
            addrow = 30
            ban = 1
            check = 0
            remrow = 3
            returnusers = 60
            updateflags = 1
            updatenote = 5
        }
        maxSleep = 2000
    }

    # Define the number of milliseconds between RPC calls
    delay = 10000

    # Control whether a stress instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
    stress_login = true
}

#
# Configuration data specific to the stats module
#
stats = {

    action = runAllTests
    // Random generator seed, if < 0, used srand(time)
    randSeed = -1
    minContextId = 1
    contextCount = 1000
    seqEntityId = 1 // if != 0, it generates entities sequentially, otherwise randomly
    minEntityId = 1
    maxEntityId = 1000000
    maxLbStartRank = 100000
    maxPeriodOffset = 0
    maxIdCount = 64
    sampleSize = 6 // number of 5 sec periods
    
    // hitRate expresses probability of hitting RPC. Values are relative and are normalized aginst sum 
    // type of value is 'double'.
    // rowCtr is a number of rows involved in the operation
    rpcList = {
    updateStats = { hitRate = 0, rowCtr = 64 },
    getLeaderboard = { hitRate = 1, rowCtr = 50 },
    getCenteredLeaderboard = { hitRate = 1, rowCtr = 50 },
    getFilteredLeaderboard = { hitRate = 1, rowCtr = 50 },
    getStatsByGroup = { hitRate = 1, rowCtr = 50 },
    getLeaderboardTree = { hitRate = 1, rowCtr = 50 }
    getStatsByGroupAsync = { hitRate = 1, rowCtr = 50 }
    getStats = { hitRate = 1, rowCtr = 50 }
    getLeaderboardFolder = { hitRate = 1, rowCtr = 50 }
    getStatGroup = { hitRate = 1, rowCtr = 50 }
    getLeaderboardGroup = { hitRate = 1, rowCtr = 50 }
    deleteStatsByContext = { hitRate = 0, rowCtr = 50 }
    deleteStats = { hitRate = 0, rowCtr = 50 }
    }

    // Define the number of milliseconds between RPC calls
    delay = 30000

    // Control whether an instance needs to authenticate its user before issuing its configured
    // RPC calls.
    login = true
    stress_login = true
}

#
# Configuration data specific to the locker module
#
locker = {
    # Define parameters used for the RPC action
    #   contentCategory = the content category used in the action.
    #   createContentCount = create and confirm at most N content items
    #   deleteContentType = filters content to test by type "owner|copy|bookmark|all"
    #   listContentEntityId = retrieves this entity's locker contents
    contentCategory = "various"
    createContentCount = 1
    deleteContentType = "all"
    listContentEntityId = 0
    leaderboardType = "MOST_RECENT"
    leaderboardView = "overall"
    leaderboardRowCount = 100

    # Define which RPC to use
    # action = noop
    # action = createContent    
    # action = deleteContent
    # action = createAndDeleteContent
    # action = listContent    
    action = listContentAndUpdateContentInfo
    # action = getTopN
    # action = getTopNMacro
    
    # Define the number of milliseconds between RPC calls
    delay = 30000

    # num_trials = 1
    # num_execs_per_trial = 2
    # delay_per_trial = 1000

    # Control whether a dummy instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
}

