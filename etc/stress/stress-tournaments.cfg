#
# Configuration file for the stress tester
#

# Define the connection and protocol parameters
connection-info = {
    protocol = fire
    encoder = heat
    decoder = heat

    # Total number of connections to use
    num-connections = 1

    # Control whether SSL is used or not
    secure = false
}

#
# This following block controls how instances are started up.
#
startup = {
    # Number of instances to start up in a given pass
    # A block size of 0 will start all instances simultaneously
    block-size = 10

    # Delay between starting instances in milliseconds
    instance-delay = 20

    # Delay between starting blocks in milliseconds
    block-delay = 333
}

#
# Define the account/authentication parameters used for account creation and authentication
#
account = {
    # Specify the starting integer value to use when generating email addresses.  This value
    # should be adjusted when multiple stress tester instances are running in parallel against the
    # same blaze server to avoid overlap of account names.  For example, if each stress tester
    # instance was configurated for 1000 connections, then the first config file would set this
    # to 0 and the second instance would set this to 1000.
    start-index = 2

    # Define the email address pattern used for authentication and account creation
    email-format = "blaze-stress%05x@ea.com"

    # Define the password used for authentication each account
    password = "password"

    # Define the persona format used when creating personas.  This is not used for authentication.
    # Authentication will just choose the first available persona associated with a master account.
    persona-format = "s%05x"

    # Define the namespace used when creating personas.
    namespace = "description"

    # Define the TOS version used when creating new accounts.
    tos = "2.0"

    # define the authentication mechanism to use: pc, ps3, or xbox360
    type = pc

    xbox360Accounts = [
#include "stress/xbox360.cfg"
    ]

}

#
# Define the list of stress modules that will be instantiated
#
modules = [ tournaments ]

#
# Define how the available instances/connections are distributed amongst the different modules
#
distribution = {
    tournaments = 1.0
}

#
# Configuration data specific to the dummy module
#
tournaments = {
    # Define which RPC to use
    action = simulateProd
      
    # parameters used in the simulate production mode
    sim = {
        notInTournament = {
            #probabilities when not in a tournament
            join = 15
            getTournaments = 20,
            getTournId = 10,
            getTournDetails = 0,
            playMatch = 0,
            getTrophies = 5,
            getMemberCounts = 15,
            sleep = 35
        },
        inTournament = {          
            leave = 5
            getTournaments = 10,
            getTournId = 10,
            getTournDetails = 5,
            reset = 2,
            playMatch = 10,
            getTrophies = 10,
            getMemberCounts = 5,
            sleep  = 43
        }   
        maxSleep = 2000
    }

    # Define the number of milliseconds between RPC calls
    delay = 0

    # Control whether a rooms instance needs to authenticate its user before issuing its configured
    # RPC calls.
    login = true
}

logging = {
    level = DEBUG2
}


