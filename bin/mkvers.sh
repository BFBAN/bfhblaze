#!/bin/bash

OUTFILE=$1
TOP=.

#
# Determine if p4 exists (and has been setup) on this machine.  If
# not, the values that would normally be populated by running perforce
# commands will be empty or some default value.
#
P4EXISTS=1
p4 > /dev/null 2>&1
if [ $? != 0 ]; then
    P4EXISTS=0;
fi

#
# Capture the current date/time, build directory, changelist number, person doing the build and
# the server version
#

CLIENTNAME=$(p4 client -o | awk -F' ' '/^Client:/ {print $2}' 2>/dev/null)
if [ "$CLIENTNAME" != "" ]; then
    CLIENTNAME=@$CLIENTNAME
fi

LCL=$(p4 changes -m1 ...$CLIENTNAME 2>/dev/null | awk -F' ' '{print $2}' 2>/dev/null)
if [ "$LCL" = "" ]; then
    LCL="?"
fi

if [ $P4EXISTS == 0 ]; then 
    DEPOT_LOCATION="?"
else
    P4RESULT=$(p4 info 2> /dev/null)
    P4ERROR=$?
    if [ $P4ERROR -ne 0 -o -z "$P4RESULT" ]; then
        echo "p4 info failed ($P4ERROR), setting default depot location"
    else
	DEPOT_LOCATION=$(echo "$P4RESULT" | grep  '^Server address:' | awk -F' ' '{print $3 }')":"
	P4RESULT=$(p4 fstat Makefile 2> /dev/null)
	P4ERROR=$?
	if [ $P4ERROR -ne 0 -o -z "$P4RESULT" ]; then
	    echo "p4 fstat failed ($P4ERROR), setting default depot location"
	    DEPOT_LOCATION="?"
	else
	    DEPOT_LOCATION+=$(echo "$P4RESULT" | grep depotFile | awk -F' ' '{print $3}' | xargs dirname)
	fi
    fi
fi

echo "[mkvers] $OUTFILE"
rm -f $OUTFILE
echo "// auto generated by $*" >> $OUTFILE
echo "extern const char _BlazeBuildTime[] = \""$(date --rfc-3339=seconds)"\";" >> $OUTFILE
echo "extern const char _BlazeBuildLocation[] = \""$(id -n -u)"@"$(uname -n)":"$(pwd)"\";" >> $OUTFILE
echo "extern const char _BlazeP4DepotLocation[] = \""$DEPOT_LOCATION"\";" >> $OUTFILE
blazevers=$(head -1 version.txt | sed -e "s/\r//g")
echo "extern const char _BlazeVersion[] = \"$blazevers\";" >> $OUTFILE
echo "extern const char _BlazeChangelist[] = \"$LCL\";" >> $OUTFILE

#
# Get all the opened files and include them as part of the build so we can reproduce (hopefully)
# exactly what the executable was built from
#

depotFiles=""
clientFiles=""
if [ $P4EXISTS != 0 ]; then
    P4RESULT=$(p4 opened ... 2> /dev/null)
    P4ERROR=$?
    if [ $P4ERROR != 0 ]; then
	echo "p4 opened failed ($P4ERROR), setting defaults for depotFiles and clientFiles"
    else
	depotFiles=$(echo "$P4RESULT" | awk -F'#' '{print $1}')

        if [ "$depotFiles" != "" ]; then
            P4RESULT=$(p4 fstat $depotFiles 2> /dev/null)
            P4ERROR=$?
            if [ $P4ERROR != 0 ]; then
                echo "p4 fstat failed ($P4ERROR), setting defaults for depotFiles and clientFiles"
                depotFiles=""
                clientFiles=""
            else
                clientFiles=$(echo "$P4RESULT" | awk -F' ' '
BEGIN { clientFile=""; }
/^\.\.\. clientFile/ { clientFile=$3; }
/^\.\.\. (headType|type)/ { type=$3; if (clientFile != "") { printf("%s\n", clientFile); clientFile=""; } }')

            fi
	fi
    fi
fi

fileIndex=0
for file in $clientFiles
do
    varname="file$fileIndex"
    fileIndex=$(expr $fileIndex + 1)
    echo "static const char* $varname = \"\\" >> $OUTFILE
    cat $file 2>/dev/null | sed -e 's/\\/\\\\/g' | sed -e 's/"/\\"/g' | sed -e 's/$/\\n\\/g'  >> $OUTFILE 
    echo "\";" >> $OUTFILE
done

echo >> $OUTFILE
echo "typedef struct" >> $OUTFILE
echo "{" >> $OUTFILE
echo "    const char* filename;" >> $OUTFILE
echo "    const char* source;" >> $OUTFILE
echo "} BlazeFileList;" >> $OUTFILE
echo "extern const BlazeFileList _BlazeEditedFiles[] = {" >> $OUTFILE

fileIndex=0
cwd=$(pwd)
for file in $clientFiles
do
    relativeFile=$(echo $file | sed -e "s%$cwd/%%g")
    echo "    { \"$relativeFile\", file$fileIndex } ," >> $OUTFILE
    fileIndex=$(expr $fileIndex + 1)
done

echo "    { 0, 0 }" >> $OUTFILE
echo "};" >> $OUTFILE
echo "" >> $OUTFILE
